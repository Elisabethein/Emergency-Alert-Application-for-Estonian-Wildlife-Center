plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'application'
}
jar {
	manifest {
		attributes 'Main-Class': 'com.EmergencyAlertApplication.EAA.EaaApplication'
	}
}

group = 'com.EmergencyAlertApplication'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

bootJar {
	archiveFileName = 'EmergencyAlertApplication.jar'
	destinationDirectory = file("$rootDir")
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	//developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.seleniumhq.selenium:selenium-java:4.26.0'

	implementation 'com.google.api-client:google-api-client:2.0.0'
	implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
	implementation 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'

	implementation 'com.google.auth:google-auth-library-oauth2-http:1.14.0'

	implementation 'org.springframework.boot:spring-boot-starter-mail'
}

def waitForServer(String urlString, int port) {
	boolean serverReady = false
	int attempts = 0
	while (!serverReady && attempts < 30) {  // Try up to 30 times
		try {
			URL url = new URL(urlString)
			HttpURLConnection connection = (HttpURLConnection) url.openConnection()
			connection.setRequestMethod("GET")
			connection.setConnectTimeout(5000)
			connection.connect()
			if (connection.responseCode == 200) {
				serverReady = true
			} else {
				println "Server is not ready (response code ${connection.responseCode}), retrying..."
			}
		} catch (Exception e) {
			println "Server not ready yet, retrying..."
		}
		attempts++
		if (!serverReady) {
			Thread.sleep(2000)
		}
	}
	if (!serverReady) {
		throw new RuntimeException("Server at $urlString did not become ready within the expected time")
	}
}

def springBootProcess
def frontendProcess
tasks.register('startTestApp') {
	group = 'verification'
	doLast {
		println "Starting backend application for Selenium tests"

		springBootProcess = new ProcessBuilder("java", "-jar", "EmergencyAlertApplication.jar", "--server.port=8080")
				.redirectErrorStream(true)
				.redirectOutput(new File("spring_boot_output.log"))
				.start()

		Thread.sleep(20000)

		println "Installing frontend dependencies"
		exec {
			commandLine 'npm', 'install'
			workingDir file('eaa_frontend')
			standardOutput = System.out
			errorOutput = System.err
			ignoreExitValue = false
		}

		println "Starting frontend application for Selenium tests"
		frontendProcess = new ProcessBuilder("npm", "run", "serve", "--", "--port", "8081")
				.directory(new File("eaa_frontend"))
				.redirectOutput(new File("frontend_output.log"))  // Capture the output
				.redirectError(new File("frontend_error.log"))
				.start()

		println "Waiting for the frontend to be ready at http://localhost:8081..."
		waitForServer("http://localhost:8081", 8081)

		println "Frontend process is running."
	}
}

tasks.register('stopTestApp') {
	group = 'verification'
	doLast {
		if (springBootProcess) {
			println "Stopping backend application after Selenium tests"
			springBootProcess.destroyForcibly()
			try {
				springBootProcess.waitFor()
			} catch (InterruptedException e) {
				e.printStackTrace()
			}
		}

		if (frontendProcess) {
			println "Stopping frontend application after Selenium tests"
			frontendProcess.destroyForcibly()
			try {
				frontendProcess.waitFor()
			} catch (InterruptedException e) {
				e.printStackTrace()
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.test {
	environment 'DB_USERNAME', System.getenv('DB_USERNAME')
	environment 'DB_PASSWORD', System.getenv('DB_PASSWORD')
	environment 'JWT_SECRET', System.getenv('JWT_SECRET')
	environment 'LOCATIONIQ_TOKEN', System.getenv('LOCATIONIQ_TOKEN')
	environment 'FOLDERID', System.getenv('FOLDERID')
}

test {
	include '**/com/EmergencyAlertApplication/EAA/unit/**/*Tests.class'
	reports {
		html.required.set(true)     // Enable HTML report generation
		junitXml.required.set(true) // Enable JUnit XML report generation
	}
}
